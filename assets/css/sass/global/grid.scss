.wrap {

	@include clearfix;

	width: 90%;
	max-width: 1100px;

	padding-left: #{ $grid-col-gutter / 2 }rem;
	padding-right: #{ $grid-col-gutter / 2 }rem;

	margin: auto;

	@media all and ( max-width: 800px ) {
		width: auto;
	}

}

// Calculate the column width.
@function grid-col-width( $grid-col-count, $column-size ) {
 	@return ( 100% / $grid-col-count ) * $column-size;
}

/**
 * Generate rules for widths for all child grid elements.
 *
 * Calculates widths for all grid- elements that are direct childeren of the container.
 * For nested grids, pass the size of the container (in columns) as the grid col count
 *
 * @param $grid-col-count: the number of columns available.
 */
@mixin grid( $grid-col-count: 12 ) {
	@for $i from 1 through $grid-col-count {
		> .grid-#{$i}  {
			width: grid-col-width( $grid-col-count, $i );
		}
	}
}

/* Standard Grid Row */
.row {
	margin: 0;
	clear: both;
	@include clearfix;
	@include grid($grid-col-count );
}

.row .row {
	margin-left: #{ $grid-col-gutter * -1 }rem;
	margin-right: #{ $grid-col-gutter * -1 }rem;
}

/**
 * Styles for all grid container.
 *
 * Placed outside the mixin to reduce repetition in the css output.
 */
.row > [class*="grid-"] {
	display: block;
	margin: 0;
	float: left;
	box-sizing: border-box;

	padding-left: #{ $grid-col-gutter }rem;
	padding-right: #{ $grid-col-gutter }rem;

}

/**
 * Nested Grid Row
 */
@for $i from 1 through $grid-col-count {
	.grid-#{$i} .row {
		@include grid( $i );
	}
}

/**
 * Double Nested Grid Row
 */
@for $i from 1 through $grid-col-count {
	@for $ii from 1 through $grid-col-count {
		.grid-#{$i} .grid-#{$ii} .row {
			@include grid( $ii );
		}
	}

}

@media all and ( max-width: 900px ) {

	.row > [class*="grid-"] {
		padding-left: #{ $grid-col-gutter-narrow }rem;
		padding-right: #{ $grid-col-gutter-narrow }rem;
	}

	.row .row {
		margin-left: #{ $grid-col-gutter-narrow * -1 }rem;
		margin-right: #{ $grid-col-gutter-narrow * -1 }rem;
	}

}

@media all and ( max-width: 700px ) {

	.row > [class*="grid-"] {
		width: 100%;
	}

	.row > .grid-1 {
		width: 16.666666667%;
	}

}


/** Add class grid-demo to grid-content to display demo grids */
#grid-demo .row [class*="grid"] .grid-content { background: rgba(0,0,0,0.1); text-align: center; margin-bottom: 1.5em;  }

/** Helper grid overlay. **/
#grid-overlay { position: fixed; top: 0; bottom: 0; left: 0; right: 0; pointer-events: none; overflow: hidden; }
#grid-overlay .wrap { background: rgba(255,0,0,0.1); height: 100%; position: relative; }
#grid-overlay .row { height: 100%; overflow: hidden; }
#grid-overlay .row.show-grid > [class*="grid"] { height: 100%; position: relative; bottom: 0; top: 0; }
#grid-overlay .row.show-grid > [class*="grid"] .grid-content { background: rgba(255,0,0,0.1); height: 100%; position: relative; bottom: 0; top: 0; }

.admin-bar #grid-overlay-toggle { top: 38px !important; }
